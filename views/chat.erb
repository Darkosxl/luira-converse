<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
<script src="https://cdn.tailwindcss.com"></script>

<style>
/* Loading animations */
@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-10px);
  }
  60% {
    transform: translateY(-5px);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.ai-loading .ai-avatar {
  animation: bounce 2s infinite;
  position: relative;
}

.ai-loading .ai-avatar::before {
  content: '';
  position: absolute;
  top: -4px;
  left: -4px;
  right: -4px;
  bottom: -4px;
  border: 2px solid transparent;
  border-top: 2px solid #1f2937;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  pointer-events: none;
}

.ai-avatar-container {
  position: relative;
  display: inline-block;
}

/* Styled code blocks */
pre {
  background-color: #f6f8fa !important;
  border: 1px solid #d1d9e0 !important;
  border-radius: 6px !important;
  padding: 16px !important;
  margin: 16px 0 !important;
  white-space: pre !important;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Source Code Pro', monospace !important;
  font-size: 14px !important;
  line-height: 1.45 !important;
  color: #24292f !important;
  overflow-x: auto !important;
  max-width: 100% !important;
}

pre code {
  background: none !important;
  padding: 0 !important;
  border: none !important;
  font-size: inherit !important;
}

/* Inline code */
code {
  background-color: #f1f3f4 !important;
  color: #333 !important;
  padding: 2px 4px !important;
  border-radius: 3px !important;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace !important;
  font-size: 13px !important;
  white-space: pre-wrap !important;
  word-wrap: break-word !important;
}

/* Table styling */
table {
  border-collapse: collapse !important;
  width: 100% !important;
  margin: 16px 0 !important;
  font-size: 14px !important;
}

table th, table td {
  border: 1px solid #d1d5db !important;
  padding: 8px 12px !important;
  text-align: left !important;
}

table th {
  background-color: #f9fafb !important;
  font-weight: 600 !important;
  color: #374151 !important;
}

table tr:nth-child(even) {
  background-color: #f9fafb !important;
}

table tr:hover {
  background-color: #f3f4f6 !important;
}
</style>

<script>
function startAIStream(aiResponse, aiId) {
  const aiContent = document.getElementById(aiId).querySelector('.text-gray-900 div');
  const avatarContainer = document.getElementById(aiId).querySelector('.ai-avatar-container');
  aiContent.innerHTML = '';
  
  let htmlContent = '';
  let charQueue = aiResponse.split('');
  let isTyping = false;
  
  // Remove loading animation immediately
  avatarContainer.classList.remove('ai-loading');
  
  function typeNextChar() {
    if (charQueue.length > 0 && !isTyping) {
      isTyping = true;
      htmlContent += charQueue.shift();
      aiContent.innerHTML = htmlContent;
      setTimeout(() => {
        isTyping = false;
        typeNextChar();
      }, 3);
    }
  }
  
  // Start typing immediately
  typeNextChar();
}




</script>

<body class="min-h-screen bg-white flex">

<%= erb :sidebar, layout: false %>
<%= erb :_agent_sidebar, layout: false %>

<!-- Main content -->
<div class="flex-1 flex flex-col">

<!-- Header with sidebar toggle -->
<div class="bg-white px-4 py-4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <button class="p-2 hover:bg-gray-100 rounded-lg mr-2" 
              hx-post="/toggle-left-sidebar" 
              hx-target="#sidebar"
              hx-swap="outerHTML">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
      </button>
    </div>
    <button class="p-2 hover:bg-gray-100 rounded-lg" 
            hx-post="/toggle-right-sidebar" 
            hx-target="#agent-sidebar"
            hx-swap="outerHTML">
      <div class="w-8 h-8 bg-gray-800 rounded-full flex items-center justify-center text-white text-sm font-semibold flex-shrink-0">
        <span style="filter: brightness(0) invert(1);">✨</span>
      </div>
    </button>
  </div>
</div>

<!-- Message Container -->
<div class="flex-1 overflow-y-auto px-4 py-6">
  <div class="container max-w-3xl mx-auto space-y-4">
    <% if @show_welcome %>
      <div id="welcome-section">
        <%= erb :_welcome, layout: false %>
      </div>
    <% end %>
    
    <!-- Existing Messages -->
    <% if locals[:messages] && locals[:messages].any? %>
      <% locals[:messages].each do |message| %>
        <% if message[:role] == 'user' %>
          <div class="flex justify-end mb-4">
            <div class="bg-black text-white p-4 rounded-2xl rounded-br-md max-w-2xl">
              <% 
                parts = JSON.parse(message[:parts])
                text_content = parts.map { |part| part['text'] }.compact.join(' ')
                # Only convert newlines that aren't part of tables
                unless text_content.include?('|')
                  text_content = text_content.gsub("\n", "\n\n")
                end
                renderer = Redcarpet::Render::HTML.new(filter_html: true, no_styles: true, safe_links_only: true)
                markdown = Redcarpet::Markdown.new(renderer, autolink: true, tables: true, fenced_code_blocks: true, space_after_headers: true)
                rendered_html = markdown.render(text_content)
              %>
              <%= rendered_html.gsub('&lt;', '<').gsub('&gt;', '>').gsub('&amp;', '&') %>
            </div>
          </div>
        <% elsif message[:role] == 'assistant' %>
          <div class="flex justify-start mb-6">
            <div class="flex items-start gap-3 max-w-2xl">
              <div class="ai-avatar-container">
                <div class="w-8 h-8 bg-gray-800 rounded-full flex items-center justify-center text-white text-sm font-semibold flex-shrink-0 ai-avatar">✨</div>
              </div>
              <div class="text-gray-900 flex-1 min-w-0 break-words">
                <div>
                  <% 
                    parts = JSON.parse(message[:parts])
                    text_content = parts.map { |part| part['text'] }.compact.join(' ')
                    # Only convert newlines that aren't part of tables
                    unless text_content.include?('|')
                      text_content = text_content.gsub("\n", "\n\n")
                    end
                    renderer = Redcarpet::Render::HTML.new(filter_html: true, no_styles: true, safe_links_only: true)
                    markdown = Redcarpet::Markdown.new(renderer, autolink: true, tables: true, fenced_code_blocks: true, space_after_headers: true)
                    rendered_html = markdown.render(text_content)
                  %>
                  <%= rendered_html.gsub('&lt;', '<').gsub('&gt;', '>').gsub('&amp;', '&') %>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
    <% end %>
    <!-- New messages will be inserted here -->
  </div>
</div>

<!-- Input Form - Sticky at bottom -->
<div class="sticky bottom-0 bg-white px-4 py-4">
  <div class="max-w-3xl mx-auto">
    <form class="relative"
          hx-post="/chat/messages"
          hx-target=".container"
          hx-swap="beforeend"
          hx-on::after-request="document.getElementById('welcome-section')?.remove()">
      <input class="w-full px-4 py-3 pr-12 border border-gray-300 rounded-xl bg-white focus:outline-none focus:ring-2 focus:ring-gray-200 focus:border-transparent" 
             name="message" 
             type="text" 
             placeholder="Send a message..."/>
      <button class="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 bg-gray-200 hover:bg-gray-300 text-gray-600 rounded-lg transition-colors" type="submit">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
        </svg>
      </button>
    </form>
  </div>
</div>

</div>

</body>
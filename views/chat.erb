<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
<script src="https://cdn.tailwindcss.com"></script>

<style>
/* Loading animations */
@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-10px);
  }
  60% {
    transform: translateY(-5px);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.ai-loading img, .logo-loading {
  width: 88px;
  height: 88px;
}

.ai-avatar-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100px;
  height: 100px;
}

.ai-avatar-container img {
  transition: all 0.3s ease-in-out;
}

/* Styled code blocks */
pre {
  background-color: #f6f8fa !important;
  border: 1px solid #d1d9e0 !important;
  border-radius: 6px !important;
  padding: 16px !important;
  margin: 16px 0 !important;
  white-space: pre !important;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Source Code Pro', monospace !important;
  font-size: 14px !important;
  line-height: 1.45 !important;
  color: #24292f !important;
  overflow-x: auto !important;
  max-width: 100% !important;
}

pre code {
  background: none !important;
  padding: 0 !important;
  border: none !important;
  font-size: inherit !important;
}

/* Inline code */
code {
  background-color: #f1f3f4 !important;
  color: #333 !important;
  padding: 2px 4px !important;
  border-radius: 3px !important;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace !important;
  font-size: 13px !important;
  white-space: pre-wrap !important;
  word-wrap: break-word !important;
}

/* Table styling */
table {
  border-collapse: collapse !important;
  width: 100% !important;
  margin: 16px 0 !important;
  font-size: 14px !important;
}

table th, table td {
  border: 1px solid #d1d5db !important;
  padding: 8px 12px !important;
  text-align: left !important;
}

table th {
  background-color: #f9fafb !important;
  font-weight: 600 !important;
  color: #374151 !important;
}

table tr:nth-child(even) {
  background-color: #f9fafb !important;
}

table tr:hover {
  background-color: #f3f4f6 !important;
}

/* Model dropdown styling */
.model-dropdown {
  bottom: 100%;
  left: 0;
  z-index: 50;
}

/* Logo rotation animation (for non-loading state) */
@keyframes logoRotate {
  0% { transform: rotate(0deg); }
  25% { transform: rotate(180deg); }
  50% { transform: rotate(180deg); }
  75% { transform: rotate(-180deg); }
  100% { transform: rotate(-180deg); }
}

/* Logo loading animation (shrink to grow + rotation) */
@keyframes logoLoadingAnimation {
  0% { transform: rotate(0deg) scale(1); }
  12.5% { transform: rotate(45deg) scale(0); }
  25% { transform: rotate(180deg) scale(1); }
  37.5% { transform: rotate(225deg) scale(0); }
  50% { transform: rotate(180deg) scale(1); }
  62.5% { transform: rotate(-135deg) scale(0); }
  75% { transform: rotate(-180deg) scale(1); }
  87.5% { transform: rotate(-225deg) scale(0); }
  100% { transform: rotate(-180deg) scale(1); }
}

/* Active loading: shrink/grow + rotation */
.ai-loading .logo-loading {
  animation: logoLoadingAnimation 2s infinite;
}

/* Not actively loading: just rotation */
.logo-loading {
  animation: logoRotate 3s infinite;
}
</style>

<script>
let selectedModel = 'capmap'; // Default to CapMap
let dropdownOpen = false;

function toggleModelDropdown() {
  const dropdown = document.getElementById('model-dropdown');
  dropdownOpen = !dropdownOpen;
  dropdown.classList.toggle('hidden', !dropdownOpen);
}

function selectModel(modelKey, modelName) {
  selectedModel = modelKey;
  document.getElementById('selected-model').textContent = modelName;
  document.getElementById('model-input').value = modelKey;
  toggleModelDropdown();
}

// Close dropdown when clicking outside
document.addEventListener('click', function(e) {
  const dropdown = document.getElementById('model-dropdown');
  const button = document.getElementById('model-selector-btn');
  if (dropdownOpen && !dropdown.contains(e.target) && !button.contains(e.target)) {
    dropdownOpen = false;
    dropdown.classList.add('hidden');
  }
});

// Initialize form submission handler
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('form');
  if (form) {
    form.addEventListener('submit', function(e) {
      // Clear loading states from all previous AI messages
      clearPreviousLoadingStates();

      // Clear the input field after sending
      setTimeout(() => {
        const messageInput = document.getElementById('message-input');
        if (messageInput) {
          messageInput.value = '';
        }
      }, 100);
    });
  }
});

function clearPreviousLoadingStates() {
  // Remove loading classes from all existing AI avatars
  const existingAvatars = document.querySelectorAll('.ai-avatar-container.ai-loading');
  existingAvatars.forEach(avatar => {
    avatar.classList.remove('ai-loading');
    const img = avatar.querySelector('img');
    if (img && img.classList.contains('logo-loading')) {
      img.classList.remove('logo-loading');
    }
  });
}

function startAIStream(aiResponse, aiId) {
  const aiContent = document.getElementById(aiId).querySelector('.text-gray-900 div');
  const avatarContainer = document.getElementById(aiId).querySelector('.ai-avatar-container');
  
  const eventSource = new EventSource('/chat/stream/' + aiId);
  let accumulatedContent = '';
  aiContent.innerHTML = '';
  
  eventSource.onmessage = function(event) {
    if (avatarContainer.classList.contains('ai-loading')) {
      avatarContainer.classList.remove('ai-loading');
      // Keep the logo but remove loading animation
      const img = avatarContainer.querySelector('img');
      if (img && img.classList.contains('logo-loading')) {
        img.classList.remove('logo-loading');
      }
    }
    accumulatedContent += event.data;
    // Show accumulated content as HTML
    aiContent.innerHTML = accumulatedContent;
  };
  
  eventSource.addEventListener('complete', function(event) {
    // Final render to ensure proper HTML
    aiContent.innerHTML = accumulatedContent;
    eventSource.close();
  });
  
  eventSource.onerror = function(error) {
    console.error('SSE error:', error);
    avatarContainer.classList.remove('ai-loading');
    // Remove loading animation on error
    const img = avatarContainer.querySelector('img');
    if (img && img.classList.contains('logo-loading')) {
      img.classList.remove('logo-loading');
    }
    aiContent.textContent = 'Error loading response';
    eventSource.close();
  };
}




</script>

<body class="min-h-screen bg-white flex">

<%= erb :sidebar, layout: false %>
<%= erb :_agent_sidebar, layout: false %>

<!-- Main content -->
<div class="flex-1 flex flex-col">

<!-- Header with sidebar toggle -->
<div class="bg-white px-4 py-4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <button class="p-2 hover:bg-gray-100 rounded-lg mr-2" 
              hx-post="/toggle-left-sidebar" 
              hx-target="#sidebar"
              hx-swap="outerHTML">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
      </button>
    </div>
    <button class="p-2 hover:bg-gray-100 rounded-lg" 
            hx-post="/toggle-right-sidebar" 
            hx-target="#agent-sidebar"
            hx-swap="outerHTML">
      <img src="/logo.svg" style="width: 88px; height: 88px;" alt="AI">
    </button>
  </div>
</div>

<!-- Message Container -->
<div class="flex-1 overflow-y-auto px-4 py-6">
  <div class="container max-w-3xl mx-auto space-y-4">
    <% if @show_welcome %>
      <div id="welcome-section">
        <%= erb :_welcome, layout: false %>
      </div>
    <% end %>
    
    <!-- Existing Messages -->
    <% if locals[:messages] && locals[:messages].any? %>
      <% locals[:messages].each do |message| %>
        <% if message[:role] == 'user' %>
          <div class="flex justify-end mb-4">
            <div class="bg-black text-white p-4 rounded-2xl rounded-br-md max-w-2xl">
              <% 
                parts = JSON.parse(message[:parts])
                text_content = parts.map { |part| part['text'] }.compact.join(' ')
                # Only convert newlines that aren't part of tables
                unless text_content.include?('|')
                  text_content = text_content.gsub("\n", "\n\n")
                end
                renderer = Redcarpet::Render::HTML.new(filter_html: true, no_styles: true, safe_links_only: true)
                markdown = Redcarpet::Markdown.new(renderer, autolink: true, tables: true, fenced_code_blocks: true, space_after_headers: true)
                rendered_html = markdown.render(text_content)
              %>
              <%= rendered_html.gsub('&lt;', '<').gsub('&gt;', '>').gsub('&amp;', '&') %>
            </div>
          </div>
        <% elsif message[:role] == 'assistant' %>
          <div class="flex justify-start mb-6">
            <div class="flex items-start gap-3 max-w-2xl">
              <div class="ai-avatar-container">
                <img src="/logo.svg" alt="AI">
              </div>
              <div class="text-gray-900 flex-1 min-w-0 break-words">
                <div>
                  <% 
                    parts = JSON.parse(message[:parts])
                    text_content = parts.map { |part| part['text'] }.compact.join(' ')
                    # Only convert newlines that aren't part of tables
                    unless text_content.include?('|')
                      text_content = text_content.gsub("\n", "\n\n")
                    end
                    renderer = Redcarpet::Render::HTML.new(filter_html: true, no_styles: true, safe_links_only: true)
                    markdown = Redcarpet::Markdown.new(renderer, autolink: true, tables: true, fenced_code_blocks: true, space_after_headers: true)
                    rendered_html = markdown.render(text_content)
                  %>
                  <%= rendered_html.gsub('&lt;', '<').gsub('&gt;', '>').gsub('&amp;', '&') %>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
    <% end %>
    <!-- New messages will be inserted here -->
  </div>
</div>

<!-- Input Form - Sticky at bottom -->
<div class="sticky bottom-0 bg-white px-4 py-4">
  <div class="max-w-3xl mx-auto">
    <form class="relative"
          hx-post="/chat/messages"
          hx-target=".container"
          hx-swap="beforeend"
          hx-on::after-request="document.getElementById('welcome-section')?.remove()">

      <!-- Model Selector Button -->
      <div class="absolute left-2 top-1/2 transform -translate-y-1/2">
        <button type="button"
                id="model-selector-btn"
                class="flex items-center gap-1 px-2 py-1 text-xs bg-gray-100 hover:bg-gray-200 rounded-lg border text-gray-700"
                onclick="toggleModelDropdown()">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
          <span id="selected-model" class="font-medium">CapMap</span>
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>

        <!-- Dropdown Menu -->
        <div id="model-dropdown"
             class="hidden absolute model-dropdown mb-2 w-64 bg-white border border-gray-300 rounded-lg shadow-lg">
          <div class="py-1 max-h-64 overflow-y-auto">
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100 font-medium text-blue-600"
                    onclick="selectModel('capmap', 'CapMap')">
              CapMap
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('claude-sonnet-4', 'Claude Sonnet 4')">
              Claude Sonnet 4
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('deepseek-chat-v3.1', 'DeepSeek Chat v3.1')">
              DeepSeek Chat v3.1
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('gemini-2.5-pro', 'Gemini 2.5 Pro')">
              Gemini 2.5 Pro
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('gemini-2.5-flash', 'Gemini 2.5 Flash')">
              Gemini 2.5 Flash
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('gpt-4.1', 'GPT-4.1')">
              GPT-4.1
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('gpt-5-chat', 'GPT-5 Chat')">
              GPT-5 Chat
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('r1-1776', 'Perplexity R1-1776')">
              Perplexity R1-1776
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('sonar-reasoning-pro', 'Perplexity Sonar Reasoning Pro')">
              Perplexity Sonar Reasoning Pro
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('qwen3-235b-thinking', 'Qwen3 235B Thinking')">
              Qwen3 235B Thinking
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('grok-4', 'Grok 4')">
              Grok 4
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('o3-pro', 'OpenAI O3 Pro')">
              OpenAI O3 Pro
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('kimi-k2', 'Kimi K2')">
              Kimi K2
            </button>
            <button type="button" class="w-full text-left px-3 py-2 text-sm hover:bg-gray-100"
                    onclick="selectModel('glm-4.5v', 'GLM-4.5V')">
              GLM-4.5V
            </button>
          </div>
        </div>
      </div>

      <input class="w-full pl-20 pr-14 py-3 border border-gray-300 rounded-xl bg-white focus:outline-none focus:ring-2 focus:ring-gray-200 focus:border-transparent"
             name="message"
             type="text"
             placeholder="Send a message..."
             id="message-input"/>
      <input type="hidden" name="model" id="model-input" value="capmap"/>
      <button class="absolute right-2 top-1/2 transform -translate-y-1/2 w-8 h-8 bg-black hover:bg-gray-800 text-white rounded-full flex items-center justify-center transition-all duration-200"
              type="submit"
              id="send-button">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 20l0-16m-4 4l4-4 4 4"/>
        </svg>
      </button>
    </form>
  </div>
</div>

</div>

</body>
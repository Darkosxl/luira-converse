<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js"></script>
<script src="https://cdn.tailwindcss.com"></script>

<style>
/* Loading animations */
@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-10px);
  }
  60% {
    transform: translateY(-5px);
  }
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.ai-loading img, .logo-loading {
  width: 88px;
  height: 88px;
}

.ai-avatar-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100px;
  height: 100px;
}

/* Styled code blocks */
pre {
  background-color: #f6f8fa !important;
  border: 1px solid #d1d9e0 !important;
  border-radius: 6px !important;
  padding: 16px !important;
  margin: 16px 0 !important;
  white-space: pre !important;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', 'Source Code Pro', monospace !important;
  font-size: 14px !important;
  line-height: 1.45 !important;
  color: #24292f !important;
  overflow-x: auto !important;
  max-width: 100% !important;
}

pre code {
  background: none !important;
  padding: 0 !important;
  border: none !important;
  font-size: inherit !important;
}

/* Inline code */
code {
  background-color: #f1f3f4 !important;
  color: #333 !important;
  padding: 2px 4px !important;
  border-radius: 3px !important;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace !important;
  font-size: 13px !important;
  white-space: pre-wrap !important;
  word-wrap: break-word !important;
}

/* Table styling */
table {
  border-collapse: collapse !important;
  width: 100% !important;
  margin: 16px 0 !important;
  font-size: 14px !important;
}

table th, table td {
  border: 1px solid #d1d5db !important;
  padding: 8px 12px !important;
  text-align: left !important;
}

table th {
  background-color: #f9fafb !important;
  font-weight: 600 !important;
  color: #374151 !important;
}

table tr:nth-child(even) {
  background-color: #f9fafb !important;
}

table tr:hover {
  background-color: #f3f4f6 !important;
}

/* Button hold animation */
#send-button::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 0%;
  background: linear-gradient(to top, #2563eb, #3b82f6);
  transition: height 0.5s ease-in-out;
  border-radius: 50%;
}

#send-button.hold-active::after {
  height: 100%;
}

/* Logo rotation animation (for non-loading state) */
@keyframes logoRotate {
  0% { transform: rotate(0deg); }
  25% { transform: rotate(180deg); }
  50% { transform: rotate(180deg); }
  75% { transform: rotate(-180deg); }
  100% { transform: rotate(-180deg); }
}

/* Logo loading animation (shrink to grow + rotation) */
@keyframes logoLoadingAnimation {
  0% { transform: rotate(0deg) scale(1); }
  12.5% { transform: rotate(45deg) scale(0); }
  25% { transform: rotate(180deg) scale(1); }
  37.5% { transform: rotate(225deg) scale(0); }
  50% { transform: rotate(180deg) scale(1); }
  62.5% { transform: rotate(-135deg) scale(0); }
  75% { transform: rotate(-180deg) scale(1); }
  87.5% { transform: rotate(-225deg) scale(0); }
  100% { transform: rotate(-180deg) scale(1); }
}

/* Active loading: shrink/grow + rotation */
.ai-loading .logo-loading {
  animation: logoLoadingAnimation 2s infinite;
}

/* Not actively loading: just rotation */
.logo-loading {
  animation: logoRotate 3s infinite;
}
</style>

<script>
let holdTimeout;
let isCapmapMode = true; // Start in capmap mode (black button)
let justToggled = false;

function updateButtonMode() {
  const button = document.getElementById('send-button');
  const luiraInput = document.getElementById('use-luira-input');
  
  if (isCapmapMode) {
    button.classList.remove('bg-blue-600', 'hover:bg-blue-700');
    button.classList.add('bg-black', 'hover:bg-gray-800');
    luiraInput.value = 'false';
  } else {
    button.classList.remove('bg-black', 'hover:bg-gray-800');
    button.classList.add('bg-blue-600', 'hover:bg-blue-700');
    luiraInput.value = 'true';
  }
}

function getCurrentLogo() {
  return isCapmapMode ? '/logo.svg' : '/logo_luira.svg';
}

function handleSendButtonDown() {
  const button = document.getElementById('send-button');
  button.classList.add('hold-active');
  
  holdTimeout = setTimeout(() => {
    // Toggle mode on hold
    isCapmapMode = !isCapmapMode;
    updateButtonMode();
    justToggled = true;
  }, 500); // 500ms hold time
}

function handleSendButtonUp() {
  const button = document.getElementById('send-button');
  button.classList.remove('hold-active');
  clearTimeout(holdTimeout);
  
  // Reset toggle flag after a short delay
  if (justToggled) {
    setTimeout(() => {
      justToggled = false;
    }, 100);
  }
}

// Initialize button mode on page load
document.addEventListener('DOMContentLoaded', function() {
  updateButtonMode();
});

// Prevent form submission if we just toggled
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('form');
  if (form) {
    form.addEventListener('submit', function(e) {
      if (justToggled) {
        e.preventDefault();
        return false;
      }
    });
  }
});

function startAIStream(aiResponse, aiId) {
  const aiContent = document.getElementById(aiId).querySelector('.text-gray-900 div');
  const avatarContainer = document.getElementById(aiId).querySelector('.ai-avatar-container');
  
  const eventSource = new EventSource('/chat/stream/' + aiId);
  let accumulatedContent = '';
  aiContent.innerHTML = '';
  
  eventSource.onmessage = function(event) {
    if (avatarContainer.classList.contains('ai-loading')) {
      avatarContainer.classList.remove('ai-loading');
    }
    accumulatedContent += event.data;
    // Show accumulated content as HTML
    aiContent.innerHTML = accumulatedContent;
  };
  
  eventSource.addEventListener('complete', function(event) {
    // Final render to ensure proper HTML
    aiContent.innerHTML = accumulatedContent;
    eventSource.close();
  });
  
  eventSource.onerror = function(error) {
    console.error('SSE error:', error);
    avatarContainer.classList.remove('ai-loading');
    aiContent.textContent = 'Error loading response';
    eventSource.close();
  };
}




</script>

<body class="min-h-screen bg-white flex">

<%= erb :sidebar, layout: false %>
<%= erb :_agent_sidebar, layout: false %>

<!-- Main content -->
<div class="flex-1 flex flex-col">

<!-- Header with sidebar toggle -->
<div class="bg-white px-4 py-4">
  <div class="flex items-center justify-between">
    <div class="flex items-center">
      <button class="p-2 hover:bg-gray-100 rounded-lg mr-2" 
              hx-post="/toggle-left-sidebar" 
              hx-target="#sidebar"
              hx-swap="outerHTML">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
      </button>
    </div>
    <button class="p-2 hover:bg-gray-100 rounded-lg" 
            hx-post="/toggle-right-sidebar" 
            hx-target="#agent-sidebar"
            hx-swap="outerHTML">
      <img src="/logo.svg" style="width: 88px; height: 88px;" alt="AI">
    </button>
  </div>
</div>

<!-- Message Container -->
<div class="flex-1 overflow-y-auto px-4 py-6">
  <div class="container max-w-3xl mx-auto space-y-4">
    <% if @show_welcome %>
      <div id="welcome-section">
        <%= erb :_welcome, layout: false %>
      </div>
    <% end %>
    
    <!-- Existing Messages -->
    <% if locals[:messages] && locals[:messages].any? %>
      <% locals[:messages].each do |message| %>
        <% if message[:role] == 'user' %>
          <div class="flex justify-end mb-4">
            <div class="bg-black text-white p-4 rounded-2xl rounded-br-md max-w-2xl">
              <% 
                parts = JSON.parse(message[:parts])
                text_content = parts.map { |part| part['text'] }.compact.join(' ')
                # Only convert newlines that aren't part of tables
                unless text_content.include?('|')
                  text_content = text_content.gsub("\n", "\n\n")
                end
                renderer = Redcarpet::Render::HTML.new(filter_html: true, no_styles: true, safe_links_only: true)
                markdown = Redcarpet::Markdown.new(renderer, autolink: true, tables: true, fenced_code_blocks: true, space_after_headers: true)
                rendered_html = markdown.render(text_content)
              %>
              <%= rendered_html.gsub('&lt;', '<').gsub('&gt;', '>').gsub('&amp;', '&') %>
            </div>
          </div>
        <% elsif message[:role] == 'assistant' %>
          <div class="flex justify-start mb-6">
            <div class="flex items-start gap-3 max-w-2xl">
              <div class="ai-avatar-container ai-loading">
                <img src="/logo.svg" class="logo-loading" alt="Loading">
              </div>
              <div class="text-gray-900 flex-1 min-w-0 break-words">
                <div>
                  <% 
                    parts = JSON.parse(message[:parts])
                    text_content = parts.map { |part| part['text'] }.compact.join(' ')
                    # Only convert newlines that aren't part of tables
                    unless text_content.include?('|')
                      text_content = text_content.gsub("\n", "\n\n")
                    end
                    renderer = Redcarpet::Render::HTML.new(filter_html: true, no_styles: true, safe_links_only: true)
                    markdown = Redcarpet::Markdown.new(renderer, autolink: true, tables: true, fenced_code_blocks: true, space_after_headers: true)
                    rendered_html = markdown.render(text_content)
                  %>
                  <%= rendered_html.gsub('&lt;', '<').gsub('&gt;', '>').gsub('&amp;', '&') %>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
    <% end %>
    <!-- New messages will be inserted here -->
  </div>
</div>

<!-- Input Form - Sticky at bottom -->
<div class="sticky bottom-0 bg-white px-4 py-4">
  <div class="max-w-3xl mx-auto">
    <form class="relative"
          hx-post="/chat/messages"
          hx-target=".container"
          hx-swap="beforeend"
          hx-on::after-request="document.getElementById('welcome-section')?.remove()">
      <input class="w-full px-4 py-3 pr-14 border border-gray-300 rounded-xl bg-white focus:outline-none focus:ring-2 focus:ring-gray-200 focus:border-transparent" 
             name="message" 
             type="text" 
             placeholder="Send a message..."
             id="message-input"/>
      <input type="hidden" name="use_luira" id="use-luira-input" value="false"/>
      <button class="absolute right-2 top-1/2 transform -translate-y-1/2 w-8 h-8 bg-black hover:bg-gray-800 text-white rounded-full flex items-center justify-center transition-all duration-200 overflow-hidden" 
              type="submit" 
              id="send-button"
              onmousedown="handleSendButtonDown()" 
              onmouseup="handleSendButtonUp()" 
              onmouseleave="handleSendButtonUp()"
              ontouchstart="handleSendButtonDown()" 
              ontouchend="handleSendButtonUp()">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 20l0-16m-4 4l4-4 4 4"/>
        </svg>
      </button>
    </form>
  </div>
</div>

</div>

</body>
<!-- Right Agent Sidebar -->
<div id="agent-sidebar" class="fixed right-0 top-0 h-full w-80 bg-gray-50 border-l border-gray-200 transform <%= @right_sidebar_open ? 'translate-x-0' : 'translate-x-full' %> transition-transform duration-300 ease-in-out z-50">
  <div class="p-4 border-b border-gray-200">
    <div class="flex items-center justify-between">
      <h2 class="text-lg font-semibold text-gray-900">Agent Models (VC Copilot)</h2>
      <button class="p-1 hover:bg-gray-100 rounded" 
              hx-post="/close-right-sidebar" 
              hx-target="#agent-sidebar"
              hx-swap="outerHTML">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  </div>
  
  <div class="overflow-y-auto h-full pb-20">
    <div class="p-4 space-y-3">
      
      <!-- Ranking Model --> 
      <div class="border border-gray-200 rounded-lg">
        <button onclick="toggleSection('ranking')" class="w-full p-3 text-left flex items-center hover:bg-gray-100">
          <div class="flex items-center gap-2">
            <img src="/logo.svg" style="width: 20px; height: 20px;" alt="Ranking">
            <span class="text-gray-900">Ranking</span>
          </div>
        </button>
        <div id="ranking-content" style="display: none;">
        <div class="p-3 border-t border-gray-200">
          <p class="text-sm text-gray-600 mb-3">This agent will ensure that one consistent metric of rank/venture capital firms against each other for a metric in a given sector.</p>
          
          <div class="space-y-4">
            <div>
              <label class="block text-sm text-gray-700 mb-2">Choose Ranking Type:</label>
              <div class="flex items-center space-x-4">
                <label class="inline-flex items-center">
                  <input type="radio" name="ranking_type" value="sector" class="form-radio" checked>
                  <span class="ml-2">Sector Rank</span>
                </label>
                <label class="inline-flex items-center">
                  <input type="radio" name="ranking_type" value="subsector" class="form-radio">
                  <span class="ml-2">Subsector Rank</span>
                </label>
              </div>
            </div>

            <!-- Sector Ranking Section -->
            <div id="sector-ranking-section">
              <div>
                <label for="sector-metrics" class="block text-sm text-gray-700 mb-1">Available Sector Metrics:</label>
                <select id="sector-metrics" class="w-full border border-gray-300 rounded p-2 text-sm">
                  <option>Current Market Size</option>
                  <option>CAGR</option>
                  <option>Total Exits / Total Investments</option>
                  <option>AUM</option>
                  <option>Ticket Size</option>
                  <option>Follow on Index</option>
                  <option>Sector specific investment</option>
                  <option>Sector specific exit</option>
                  <option>Sector specific exit/investment</option>
                </select>
              </div>
              <div>
                <label for="sector-select" class="block text-sm text-gray-700 mb-1">Available Sectors:</label>
                <select id="sector-select" class="w-full border border-gray-300 rounded p-2 text-sm">
                  <option>Loading sectors...</option>
                </select>
              </div>
            </div>

            <!-- Subsector Ranking Section (hidden by default) -->
            <div id="subsector-ranking-section" style="display: none;">
              <div>
                <label for="subsector-metrics" class="block text-sm text-gray-700 mb-1">Available Subsector Metrics:</label>
                <select id="subsector-metrics" class="w-full border border-gray-300 rounded p-2 text-sm">
                  <option>series_#</option>
                </select>
              </div>
              <div>
                <label for="subsector-select" class="block text-sm text-gray-700 mb-1">Available Subsectors:</label>
                <select id="subsector-select" class="w-full border border-gray-300 rounded p-2 text-sm">
                  <option>Loading subsectors...</option>
                </select>
              </div>
            </div>

            <button id="generate-prompt-btn" class="w-full bg-gray-800 text-white py-2 rounded-lg hover:bg-gray-700 transition-colors text-sm">
              Generate Prompt
            </button>
          </div>
        </div>

        <script>
          document.addEventListener('DOMContentLoaded', function() {
            const rankingTypeRadios = document.querySelectorAll('input[name="ranking_type"]');
            const sectorSection = document.getElementById('sector-ranking-section');
            const subsectorSection = document.getElementById('subsector-ranking-section');
            const sectorSelect = document.getElementById('sector-select');
            const subsectorSelect = document.getElementById('subsector-select');
            const generatePromptBtn = document.getElementById('generate-prompt-btn');
            const chatInput = document.querySelector('input[name="message"]');

            // --- Function to fetch and populate a dropdown ---
            function populateDropdown(selectElement, url, dataKey) {
              fetch(url)
                .then(response => response.json())
                .then(data => {
                  selectElement.innerHTML = ''; // Clear loading message
                  const items = data[dataKey] || [];
                  if (items.length === 0) {
                    selectElement.innerHTML = '<option>No data available</option>';
                    return;
                  }
                  items.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item;
                    option.textContent = item;
                    selectElement.appendChild(option);
                  });
                })
                .catch(error => {
                  console.error(`Error fetching ${dataKey}:`, error);
                  selectElement.innerHTML = `<option>Error loading ${dataKey}</option>`;
                });
            }

            // --- Populate dropdowns on page load ---
            populateDropdown(sectorSelect, '/chat/available_sectors', 'sectors');
            populateDropdown(subsectorSelect, '/chat/available_subsectors', 'subsectors');
            
            // --- Handle radio button changes ---
            rankingTypeRadios.forEach(radio => {
              radio.addEventListener('change', function() {
                if (this.value === 'sector') {
                  sectorSection.style.display = 'block';
                  subsectorSection.style.display = 'none';
                } else {
                  sectorSection.style.display = 'none';
                  subsectorSection.style.display = 'block';
                }
              });
            });

            // --- Handle Generate Prompt button click ---
            generatePromptBtn.addEventListener('click', function() {
              const rankingType = document.querySelector('input[name="ranking_type"]:checked').value;
              let topic = '';
              let metric = '';

              if (rankingType === 'sector') {
                topic = document.getElementById('sector-select').value;
                metric = document.getElementById('sector-metrics').value;
              } else {
                topic = document.getElementById('subsector-select').value;
                metric = document.getElementById('subsector-metrics').value;
              }

              if (topic && metric && chatInput) {
                const prompt = `top 5 VCs in "${topic}" using "${metric}"`;
                chatInput.value = prompt;
                chatInput.focus();
              } else {
                if (!chatInput) console.error('Chat input not found');
              }
            });
          });
        </script>

        </div>
      </div>

      <!-- Reasoning Model -->
      <div class="border border-gray-200 rounded-lg">
        <button onclick="toggleSection('reasoning')" class="w-full p-3 text-left flex items-center hover:bg-gray-100">
          <div class="flex items-center gap-2">
            <img src="/logo.svg" style="width: 20px; height: 20px;" alt="Reasoning">
            <span class="text-gray-900">Reasoning</span>
          </div>
        </button>
        <div id="reasoning-content" style="display: none;">
        <div class="p-3 border-t border-gray-200">
          <p class="text-sm text-gray-600 mb-3">This one is a generalist model, it can perform general database queries in the FinTech tables available at its disposal, here are some prompts one can try:</p>
          <div class="space-y-2">
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'All Series B investments made by Sequoia Capital'">
              All Series B investments made by Sequoia Capital
            </button>
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'Show startups in AI with over $10M funding and in...'">
              Show startups in AI with over $10M funding and in...
            </button>
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'Which VCs invested in both HealthTech and FinTech...'">
              Which VCs invested in both HealthTech and FinTech...
            </button>
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'List the series B or later-stage investments of Accel'">
              List the series B or later-stage investments of Accel
            </button>
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'Sort startups according to number of follow-on inv...'">
              Sort startups according to number of follow-on inv...
            </button>
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'List the startups that Sequoia Capital and GV have invested in together'">
              List the startups that Sequoia Capital and GV have...
            </button>
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'CAP table of OpenAI'">
              CAP table of OpenAI
            </button>
            <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                    onclick="document.querySelector('input[name=message]').value = 'Which VCs can invest in the next round of Stripe?'">
              Which VCs can invest in the next round of Stripe?
            </button>
          </div>
        </div>
        </div>
      </div>

      <!-- Prediction Model -->
      <div class="border border-gray-200 rounded-lg">
        <button onclick="toggleSection('prediction')" class="w-full p-3 text-left flex items-center hover:bg-gray-100">
          <div class="flex items-center gap-2">
            <img src="/logo.svg" style="width: 20px; height: 20px;" alt="Prediction">
            <span class="text-gray-900">Prediction</span>
          </div>
        </button>
        <div id="prediction-content" style="display: none;">
        <div class="p-3 border-t border-gray-200">
          <p class="text-sm text-gray-600 mb-3">This agent is able to draw conclusions from repeating venture capital investments. You have two main types of prompts:</p>
          <div class="space-y-3">
            <div>
              <p class="text-sm font-medium text-gray-700 mb-2">Type 1:</p>
              <p class="text-sm text-gray-600 mb-2">Predict the next VC that will invest in Startup</p>
              <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                      onclick="document.querySelector('input[name=message]').value = 'predict the next VC that will invest in Cluely'">
                Try Type 1
              </button>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-700 mb-2">Type 2:</p>
              <p class="text-sm text-gray-600 mb-2">Predict which startup would VC invest in next. You can limit the second prompt by adding it a sector of your choice.</p>
              <button class="w-full text-left p-2 text-sm text-gray-700 hover:bg-gray-100 rounded border"
                      onclick="document.querySelector('input[name=message]').value = 'predict which startup in the AI sector would Sequoia Capital invest in next'">
                Try Type 2
              </button>
            </div>
          </div>
        </div>
        </div>
      </div>

    </div>
  </div>
</div>




<script>
function toggleSection(sectionName) {
  const content = document.getElementById(sectionName + '-content');
  if (content) {
    content.style.display = content.style.display === 'none' ? 'block' : 'none';
  }
}
</script>
